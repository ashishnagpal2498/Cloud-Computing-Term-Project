AWSTemplateFormatVersion: 2010-09-09
Description: The template used to create an Infrastructure
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: production
    AllowedValues:
      - dev
      - test
      - production
  ApplicationName:
    Type: String
    Default: imagicon
  VpcCIDR:
    Description: CIDR for VPC
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Description: CIDR for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2CIDR:
    Description: CIDR  for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet1CIDR:
    Description: CIDR for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet2CIDR:
    Description: CIDR for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24
  FrontendECRImage:
    Type: String
  BackendECRImage:
    Type: String
  LabRoleARN:
    Type: String
    Description: Role which is assumed by the services
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub '${ApplicationName}-vpc'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub '${ApplicationName}-internet-gateway'
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub '${ApplicationName}-public-subnet-1'
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub '${ApplicationName}-public-subnet-2'
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub '${ApplicationName}-private-subnet-1'
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub '${ApplicationName}-private-subnet-2'
  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub '${ApplicationName}-public-route-table'
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub '${ApplicationName}-private-route-table'
  DefaultPrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  LoadBalancerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
  ECSSGBackend:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow request from loadbalancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId
  ECSSGFrontend:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow request from loadbalancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub '${ApplicationName}-cluster'
  TaskDef1:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      NetworkMode: awsvpc
      Family: frontend-td-cfn"
      TaskRoleArn: !Ref LabRoleARN
      ExecutionRoleArn: !Ref LabRoleARN
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: frontend-container
          Image: !Ref FrontendECRImage
          Cpu: 512
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
          Memory: 1024
          Essential: true
          Environment:
            - Name: REACT_APP_ENVIRONMENT
              Value: production
            - Name: REACT_APP_FRONTEND_URL
              Value: localhost
            - Name: REACT_APP_BACKEND_URL
              Value: !GetAtt LoadBalancerECS.DNSName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: 'true'
              awslogs-group: !Sub '/ecs/${ApplicationName}-logs'
              awslogs-region: us-east-1
              awslogs-stream-prefix: !Sub 'ecs/${ApplicationName}-frontend'
  TaskDef2:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      NetworkMode: awsvpc
      Family: backend-td-cfn"
      TaskRoleArn: !Ref LabRoleARN
      ExecutionRoleArn: !Ref LabRoleARN
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: backend-container
          Image: !Ref BackendECRImage
          Cpu: 512
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
          Memory: 1024
          Essential: true
          Environment:
            - Name: FRONTEND_URL
              Value: !GetAtt LoadBalancerECS.DNSName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: 'true'
              awslogs-group: !Sub '/ecs/${ApplicationName}-logs'
              awslogs-region: us-east-1
              awslogs-stream-prefix: !Sub 'ecs/${ApplicationName}-backend'
  Service1:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      TaskDefinition: !Ref TaskDef1
      ServiceName: frontend-service
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: frontend-container
          ContainerPort: 3000
          TargetGroupArn: !Ref FrontendTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSGFrontend
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      PlatformVersion: LATEST
    DependsOn:
      - FrontendAppLisenter
  Service2:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      TaskDefinition: !Ref TaskDef2
      ServiceName: backend-service
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: backend-container
          ContainerPort: 8080
          TargetGroupArn: !Ref BackendTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSGBackend
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
    DependsOn:
      - BackendServiceLisenter
  LoadBalancerECS:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: application
      Name: !Sub '${ApplicationName}-lb'
      SecurityGroups:
        - !Ref LoadBalancerSG
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  BackendServiceLisenter:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      LoadBalancerArn: !Ref LoadBalancerECS
      Port: '8080'
      Protocol: HTTP
  FrontendAppLisenter:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup
      LoadBalancerArn: !Ref LoadBalancerECS
      Port: '80'
      Protocol: HTTP
  FrontendTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${ApplicationName}-Frontend-Tg'
      VpcId: !Ref VPC
      Port: 3000
      Protocol: HTTP
      TargetType: ip
  BackendTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${ApplicationName}-Backend-Tg'
      VpcId: !Ref VPC
      Port: 8080
      Protocol: HTTP
      TargetType: ip
Outputs:
  LoadBalancerDNS:
    Description: Domain Name of Load Balancer
    Value: !GetAtt LoadBalancerECS.DNSName
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
