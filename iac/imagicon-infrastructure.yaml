AWSTemplateFormatVersion: 2010-09-09
Description: The template used to create an Imagicon Application Infrastructure
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
      - 
        Label: 
          default: "General Configuration"
        Parameters: 
          - EnvironmentName
          - ApplicationName
          - S3BucketAsset
          - LabRoleARN
      - 
        Label: 
          default: "ECS Cluster Configuration"
        Parameters: 
          - FrontendECRImage
          - BackendECRImage
      - 
        Label: 
          default: "Lambda and Bucket"
        Parameters: 
          - LambdaS3Key
          - BucketName

Parameters:

# ---------------------------- General Parameters ------------------------
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: production
    AllowedValues: ["dev", "test", "production"]

  ApplicationName:
    Type: String
    Default: imagicon
  S3BucketAsset:
    Type: String
    Default: "imagicon-files"

# ---------------------------- VPC Parameters ------------------------

  VpcCIDR:
    Description: CIDR for VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: CIDR for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: CIDR  for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1CIDR:
    Description: CIDR for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: CIDR for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24

# ---------------------------- ECS Parameters ----------------------------

  FrontendECRImage:
    Type: String
    Default: "992382575885.dkr.ecr.us-east-1.amazonaws.com/imagicon-frontend:latest"
  BackendECRImage:
    Type: String
    Default: "992382575885.dkr.ecr.us-east-1.amazonaws.com/imagicon-backend:latest"

  LabRoleARN:
    Type: String
    Default: "arn:aws:iam::992382575885:role/LabRole"
    Description: Role which is assumed by the services


#  --------------------- Lambda Parameters ---------------------------
  LambdaS3Key:
    Type: String
    Default: "lambda/lambda-code.zip"

# -------------------- S3 Bucket Parameters -------------------------
  BucketName:
    Type: String
    Default: imagicon-bucket-uploads

Resources:
# ------------------------ ServiceType - Network: VPC ----------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${ApplicationName}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${ApplicationName}-internet-gateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${ApplicationName}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${ApplicationName}-public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${ApplicationName}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${ApplicationName}-private-subnet-2

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${ApplicationName}-public-route-table

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${ApplicationName}-private-route-table

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${ApplicationName}-LoadBalancer-sg

  ECSSGBackend:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow request from loadbalancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${ApplicationName}-ECS-backend-sg

  ECSSGFrontend:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow request from loadbalancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${ApplicationName}-ECS-frontend-sg

# ------------------------ ServiceType - Network: VPC ----------------------------------

# ---------------------- ServiceType - Compute: ECS  -----------------------------------

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ApplicationName}-cluster

  TaskdefinitionFrontend: 
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc 
      Family: !Sub "${ApplicationName}-frontend"
      TaskRoleArn: !Ref LabRoleARN
      ExecutionRoleArn: !Ref LabRoleARN
      RequiresCompatibilities: 
        - FARGATE
      Cpu: 1024
      Memory: 2048
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions: 
        - 
          Name: !Sub "${ApplicationName}-frontend-container"
          Image: !Ref FrontendECRImage  #Frontend- Image
          Cpu: 512
          PortMappings: 
            - 
              ContainerPort: 3000
              HostPort: 3000
          Memory: 1024
          Essential: true
          Environment:
            -
              Name: "REACT_APP_ENVIRONMENT"
              Value: "production"
            -
              Name: "REACT_APP_FRONTEND_URL"
              Value: "localhost"
            -
              Name: "REACT_APP_BACKEND_URL"
              Value: !GetAtt LoadBalancerECS.DNSName 

          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: "true"
              awslogs-group: !Sub "/ecs/${ApplicationName}-logs"
              awslogs-region: "us-east-1"
              awslogs-stream-prefix: !Sub "ecs/${ApplicationName}-frontend"

  TaskdefinitionBackend: 
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc 
      Family: !Sub "${ApplicationName}-backend-cfn"
      TaskRoleArn: !Ref LabRoleARN
      ExecutionRoleArn: !Ref LabRoleARN
      RequiresCompatibilities: 
        - FARGATE
      Cpu: 1024
      Memory: 2048
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions: 
        - 
          Name: !Sub "${ApplicationName}-backend-container"
          Image: !Ref BackendECRImage
          Cpu: 512
          PortMappings: 
            - 
              ContainerPort: 8080
              HostPort: 8080
          Memory: 1024
          Essential: true
          Environment:
            -
              Name: "FRONTEND_URL"
              Value: !GetAtt LoadBalancerECS.DNSName 
            - Name: "S3_BUCKET_NAME"
              Value: !Ref BucketName
            - Name: "DYNAMODB_TABLE_NAME"
              Value: !Ref DynamoDBTable

          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: "true"
              awslogs-group: !Sub "/ecs/${ApplicationName}-logs"
              awslogs-region: "us-east-1"
              awslogs-stream-prefix: !Sub "ecs/${ApplicationName}-backend"


  ECSServiceFrontend:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      TaskDefinition: !Ref TaskdefinitionFrontend
      ServiceName: !Sub ${ApplicationName}-frontend
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: !Sub ${ApplicationName}-frontend-container
          ContainerPort: 3000
          TargetGroupArn: !Ref FrontendTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref ECSSGFrontend
          Subnets: 
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
    DependsOn:
      - FrontendLisenter


  ECSServiceBackend:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      TaskDefinition: !Ref TaskdefinitionBackend
      ServiceName: !Sub ${ApplicationName}-backend
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: !Sub ${ApplicationName}-backend-container
          ContainerPort: 8080
          TargetGroupArn: !Ref BackendTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref ECSSGBackend
          Subnets: 
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
    DependsOn:
      - BackendLisenter

# ---------------------- ServiceType - Compute: ECS  -----------------------------------


# ---------------------- ServiceType - General: ELB -----------------------------------
  LoadBalancerECS:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: application
      Name: !Sub ${ApplicationName}-lb
      SecurityGroups: 
        - !Ref LoadBalancerSG
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  BackendLisenter:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      LoadBalancerArn: !Ref LoadBalancerECS
      Port: '8080'
      Protocol: HTTP

  FrontendLisenter:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup
      LoadBalancerArn: !Ref LoadBalancerECS
      Port: '80'
      Protocol: HTTP

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ApplicationName}-Frontend-Tg
      VpcId: !Ref VPC
      Port: 3000
      Protocol: HTTP
      TargetType: ip

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ApplicationName}-Backend-Tg
      VpcId: !Ref VPC
      Port: 8080
      Protocol: HTTP
      TargetType: ip

# ---------------------- ServiceType - General: ELB -----------------------------------


# ---------------------- ServiceType - Compute: Lambda  -----------------------------------
  SearchFacesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: searchFace
      Handler: searchFaces.lambda_handler
      Role: !Ref LabRoleARN
      Code:
        S3Bucket: !Ref S3BucketAsset
        S3Key: !Ref LambdaS3Key
      Runtime: python3.12
      Timeout: 25
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  CreateCollectionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: create_collection
      Handler: createCollection.lambda_handler
      Role: !Ref LabRoleARN
      Code:
        S3Bucket: !Ref S3BucketAsset
        S3Key: !Ref LambdaS3Key
      Runtime: python3.12
      Timeout: 25
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

# ---------------------- ServiceType - Storage: DynamoDB Table and S3 Bucket  -----------------------------------
  DynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "username"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "username"
          KeyType: "HASH"
          
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "user-images"

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName 
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      AccessControl: LogDeliveryWrite
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

Outputs:
  ClusterName:
    Description: The cluster used to create the service.
    Value: !Ref ECSCluster
  LoadBalancer:
    Description: The created load balancer.
    Value: !Ref LoadBalancerECS
  LoadBalancerDNS:
    Description: Domain Name of Load Balancer
    Value: !GetAtt LoadBalancerECS.DNSName
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
